GIT by Jad Khalili

TERMINAL

- GitBash or Ubuntu
- cd ..    directory up
- cd - 
- cd newfolder
- use tab to complete partial folder names
- it is case-sensitive
- cd ~	  default path
- cd /	  top level directory
- cd \mnt\C\Users\codin\Documents\coding   accessing a windows folder.
- ls	list files and folders in current dir
- right-click to paste
- git --version
- mkdir    create new folder
- rm -rf newfolder 	remove folder and its contents
- create file: touch file.csv	
- rm	remove all files in current dir
- rm anotherfile.csv


GIT BASICS

- GitHub is a remote repository
- your computer hosts the local repository
- a repository is a timeline of an entire project
- a directory  or working directory is a project in its current state
- 

CREATING A LOCAL GIT REPOSITORY
- create a repository folder 'mkdir first-repo
- path  
- to intitialize a git repo, in terminal, cd to the folder and type 'git init'

ADD REMOVE STAGING AREA
- create a files 'touch first-file.txt' ... touch script.py website.html style.css two.xml three.csv dlete-this.txt
- to see staging area type 'git status'
- add file to staging area 'git add first-file.txt'
- add all 'git add .' (like git add *)
- remove temporarily 'git untrack.txt'
- permanent remove, forced rm 'git rm -f untrack.txt'. -f stands for force, so this command force removes the file from the working directory
- untrack a file 'git rm --cached untrack.txt'

FIRST COMMIT
- git commit
- git config --global user.email "bobbilusic@gmail.com"
- git config --global user.name "bobbi"
- git commit -help
- git commit -m "initial commit"
- to commit tracked files 'git commit -a -m "adding tracked files" '
- list all commits 'git log'
- stuck in git log? press 'q'
- for condensed display 'git log --oneline'

GIT CHECKOUT
- git checkout 752c4b4eb3bf988252775638667492eaa3169ca2
- 'git checkout master' to get to the master branch ~ top level ~ latest commit

REVERT and RESET
- 'git revert' restores a specified commit 
- careful: 'git reset --hard' is permanent. deletes all changes done past the specified commit, unlike checkout

RESET TYPES
- flag types: --soft, mixed, hard
- default is mixed. need not be specified

GITIGNORE
- a way to untrack files permanently
- a list of files and directories. ie. autogenerated files
- touch .gitignore
- remove all cached files 'git rm -r --cached .'

BRANCHES
- a branch is a separate development path. i.e. release path, bug-fixing path, feature development
- can be added, deleted, merged
- 	cd /mnt/c/Users/codin/Documents/coding/aa-git/new-software/
- create initial commit at the beginning setup of a project
- create a new branch 'git branch name'
- create and switch to new branch 'git checkout -b name'
- list all branches 'git branch -a'
- remove a branch 'git branch -d name'

MERGING BRANCHES
- merge a branch to the branch you are currently in 'git merge name'


GITHUB
------
- downloaded repo: 
	cd /mnt/c/Users/codin/Documents/coding/aa-git/github/Spoon-Knife-master

CONNECTING TO GH
- initialize new local repo before connecting to Github
- To connect to GH repo, add origin to local repo - use HTTPS:
	git remote add origin https://github.com/codingbybl/myfirstrepo.git
- test to show fetch and push: shows you all of your remote origins
	git remote -v

PUSH AND PULL
track a branch before pulling: 
	git pull origin master
	- test with git log and ls
	- delete a file: rm -rf LICENSE 
	- test: git status
	- git add .
	- git commit -m "removed LICENSE"
	- git log
	- git push -u origin master
	- modify on GH
	- git pull
	- modify
	- git push

DELETING BRANCHES
- each branch has to be pushed separately
	- git push origin err01
- delete a remote branch
	git push origin --delete err01

GIT GUI SOURCETREE
- not available for Linux fyi
- 








 


